{"uuid":"9dab92cb-0204-401a-937a-b1be81ebf1d5","historyId":"23e6acb7c5248dc14ee358eede7d8e4f","testCaseId":"[engine:junit-jupiter]/[class:com.eventsequor.backend_crud_products.parallelcustom.ParallelGroupTest]/[test-factory:testPorGrupos()]/[dynamic-container:#3]/[dynamic-test:#1]","testCaseName":"Test input: E","fullName":"com.eventsequor.backend_crud_products.parallelcustom.ParallelGroupTest.testPorGrupos","labels":[{"name":"junit.platform.uniqueid","value":"[engine:junit-jupiter]/[class:com.eventsequor.backend_crud_products.parallelcustom.ParallelGroupTest]/[test-factory:testPorGrupos()]/[dynamic-container:#3]/[dynamic-test:#1]"},{"name":"host","value":"192.168.0.12"},{"name":"thread","value":"12504@192.168.0.12.ForkJoinPool-1-worker-1(19)"},{"name":"framework","value":"junit-platform"},{"name":"language","value":"java"},{"name":"package","value":"com.eventsequor.backend_crud_products.parallelcustom.ParallelGroupTest"},{"name":"testClass","value":"com.eventsequor.backend_crud_products.parallelcustom.ParallelGroupTest"},{"name":"testMethod","value":"testPorGrupos"},{"name":"suite","value":"com.eventsequor.backend_crud_products.parallelcustom.ParallelGroupTest"}],"links":[],"name":"Test input: E","status":"failed","statusDetails":{"known":false,"muted":false,"flaky":false,"message":"","trace":"org.opentest4j.AssertionFailedError\n\tat org.junit.jupiter.api.AssertionUtils.fail(AssertionUtils.java:34)\n\tat org.junit.jupiter.api.Assertions.fail(Assertions.java:119)\n\tat com.eventsequor.backend_crud_products.parallelcustom.ParallelGroupTest.testA(ParallelGroupTest.java:41)\n\tat com.eventsequor.backend_crud_products.parallelcustom.ParallelGroupTest.lambda$testPorGrupos$0(ParallelGroupTest.java:29)\n\tat java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:183)\n\tat java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)\n\tat java.base/java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:179)\n\tat java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)\n\tat java.base/java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1625)\n\tat java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:509)\n\tat java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:499)\n\tat java.base/java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:150)\n\tat java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:173)\n\tat java.base/java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)\n\tat java.base/java.util.stream.ReferencePipeline.forEachOrdered(ReferencePipeline.java:601)\n\tat java.base/java.util.Optional.ifPresent(Optional.java:178)\n\tat java.base/java.util.concurrent.ForkJoinTask.doExec$$$capture(ForkJoinTask.java:373)\n\tat java.base/java.util.concurrent.ForkJoinTask.doExec(ForkJoinTask.java)\n\tat java.base/java.util.concurrent.ForkJoinPool$WorkQueue.topLevelExec(ForkJoinPool.java:1182)\n\tat java.base/java.util.concurrent.ForkJoinPool.scan(ForkJoinPool.java:1655)\n\tat java.base/java.util.concurrent.ForkJoinPool.runWorker(ForkJoinPool.java:1622)\n\tat java.base/java.util.concurrent.ForkJoinWorkerThread.run(ForkJoinWorkerThread.java:165)\n"},"stage":"finished","description":"","steps":[],"attachments":[],"parameters":[],"start":1754590641020,"stop":1754590641037}